// <auto-generated />
using System;
using Airbnb.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Airbnb.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250416193647_update models day2")]
    partial class updatemodelsday2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Airbnb.DATA.models.Availability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Availability");
                });

            modelBuilder.Entity("Airbnb.DATA.models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckInDte")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("bookings");
                });

            modelBuilder.Entity("Airbnb.DATA.models.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Airbnb.DATA.models.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Distance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Maxgeusts")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("properties");
                });

            modelBuilder.Entity("Airbnb.DATA.models.PropertyCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("propertyCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Rooms",
                            Name = "fas fa-bed"
                        },
                        new
                        {
                            Id = 2,
                            Description = "National parks",
                            Name = "fas fa-tree"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Icons",
                            Name = "fas fa-icons"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Amazing pools",
                            Name = "fas fa-person-swimming"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Beach",
                            Name = "fas fa-umbrella-beach"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Countryside",
                            Name = "fas fa-tractor"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Lake",
                            Name = "fas fa-water"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Amazing views",
                            Name = "fas fa-mountain-sun"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Lakefront",
                            Name = "fas fa-water"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Campers",
                            Name = "fas fa-caravan"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Island",
                            Name = "fas fa-umbrella-beach"
                        },
                        new
                        {
                            Id = 12,
                            Description = "OMG!",
                            Name = "fas fa-star"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Design",
                            Name = "fas fa-pencil-ruler"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Arctic",
                            Name = "fas fa-snowflake"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Tiny homes",
                            Name = "fas fa-home"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Trending",
                            Name = "fas fa-fire"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Surfing",
                            Name = "fas fa-water"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Caves",
                            Name = "fas fa-mountain"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Camping",
                            Name = "fas fa-campground"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Golfing",
                            Name = "fas fa-golf-ball-tee"
                        },
                        new
                        {
                            Id = 21,
                            Description = "Bed & breakfasts",
                            Name = "fas fa-mug-hot"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Desert",
                            Name = "fas fa-sun"
                        },
                        new
                        {
                            Id = 23,
                            Description = "Tropical",
                            Name = "fas fa-sun"
                        },
                        new
                        {
                            Id = 24,
                            Description = "New",
                            Name = "fas fa-star-of-life"
                        },
                        new
                        {
                            Id = 25,
                            Description = "Chef's kitchens",
                            Name = "fas fa-utensils"
                        },
                        new
                        {
                            Id = 26,
                            Description = "Mansions",
                            Name = "fas fa-building-columns"
                        },
                        new
                        {
                            Id = 27,
                            Description = "Top cities",
                            Name = "fas fa-city"
                        },
                        new
                        {
                            Id = 28,
                            Description = "Cabins",
                            Name = "fas fa-house-chimney"
                        },
                        new
                        {
                            Id = 29,
                            Description = "Earth homes",
                            Name = "fas fa-leaf"
                        },
                        new
                        {
                            Id = 30,
                            Description = "Farms",
                            Name = "fas fa-seedling"
                        },
                        new
                        {
                            Id = 31,
                            Description = "A-frames",
                            Name = "fas fa-house"
                        },
                        new
                        {
                            Id = 32,
                            Description = "Luxe",
                            Name = "fas fa-gem"
                        },
                        new
                        {
                            Id = 33,
                            Description = "Vineyards",
                            Name = "fas fa-wine-bottle"
                        },
                        new
                        {
                            Id = 34,
                            Description = "Historical homes",
                            Name = "fas fa-landmark"
                        },
                        new
                        {
                            Id = 35,
                            Description = "Castles",
                            Name = "fas fa-chess-rook"
                        },
                        new
                        {
                            Id = 36,
                            Description = "Skiing",
                            Name = "fas fa-person-skiing"
                        },
                        new
                        {
                            Id = 37,
                            Description = "Hanoks",
                            Name = "fas fa-house-flag"
                        },
                        new
                        {
                            Id = 38,
                            Description = "Top of the world",
                            Name = "fas fa-globe"
                        },
                        new
                        {
                            Id = 39,
                            Description = "Cycladic homes",
                            Name = "fas fa-church"
                        },
                        new
                        {
                            Id = 40,
                            Description = "Beachfront",
                            Name = "fas fa-umbrella-beach"
                        },
                        new
                        {
                            Id = 41,
                            Description = "Shepherd's huts",
                            Name = "fas fa-house"
                        },
                        new
                        {
                            Id = 42,
                            Description = "Windmills",
                            Name = "fas fa-fan"
                        },
                        new
                        {
                            Id = 43,
                            Description = "Ryokans",
                            Name = "fas fa-house-circle-check"
                        },
                        new
                        {
                            Id = 44,
                            Description = "Boats",
                            Name = "fas fa-ship"
                        },
                        new
                        {
                            Id = 45,
                            Description = "Minshukus",
                            Name = "fas fa-house-user"
                        },
                        new
                        {
                            Id = 46,
                            Description = "Play",
                            Name = "fas fa-gamepad"
                        },
                        new
                        {
                            Id = 47,
                            Description = "Casas particulares",
                            Name = "fas fa-house-circle-exclamation"
                        },
                        new
                        {
                            Id = 48,
                            Description = "Treehouses",
                            Name = "fas fa-tree"
                        },
                        new
                        {
                            Id = 49,
                            Description = "Domes",
                            Name = "fas fa-circle"
                        },
                        new
                        {
                            Id = 50,
                            Description = "Yurts",
                            Name = "fas fa-circle-notch"
                        },
                        new
                        {
                            Id = 51,
                            Description = "Barns",
                            Name = "fas fa-warehouse"
                        },
                        new
                        {
                            Id = 52,
                            Description = "Towers",
                            Name = "fas fa-tower-observation"
                        },
                        new
                        {
                            Id = 53,
                            Description = "Adapted",
                            Name = "fas fa-wheelchair"
                        },
                        new
                        {
                            Id = 54,
                            Description = "Ski-in/out",
                            Name = "fas fa-snowboarding"
                        },
                        new
                        {
                            Id = 55,
                            Description = "Off-the-grid",
                            Name = "fas fa-solar-panel"
                        },
                        new
                        {
                            Id = 56,
                            Description = "Houseboats",
                            Name = "fas fa-sailboat"
                        },
                        new
                        {
                            Id = 57,
                            Description = "Containers",
                            Name = "fas fa-box"
                        },
                        new
                        {
                            Id = 58,
                            Description = "Creative spaces",
                            Name = "fas fa-lightbulb"
                        },
                        new
                        {
                            Id = 59,
                            Description = "Grand pianos",
                            Name = "fas fa-music"
                        },
                        new
                        {
                            Id = 60,
                            Description = "Riads",
                            Name = "fas fa-mosque"
                        },
                        new
                        {
                            Id = 61,
                            Description = "Dammusi",
                            Name = "fas fa-house-lock"
                        },
                        new
                        {
                            Id = 62,
                            Description = "Trulli",
                            Name = "fas fa-house-circle-check"
                        });
                });

            modelBuilder.Entity("Airbnb.DATA.models.PropertyImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("propertyImages");
                });

            modelBuilder.Entity("Airbnb.DATA.models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("Airbnb.DATA.models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Airbnb.DATA.models.Availability", b =>
                {
                    b.HasOne("Airbnb.DATA.models.Property", "Property")
                        .WithMany("Availabilities")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Airbnb.DATA.models.Booking", b =>
                {
                    b.HasOne("Airbnb.DATA.models.Property", "Property")
                        .WithMany("Bookings")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Airbnb.DATA.models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Airbnb.DATA.models.Property", b =>
                {
                    b.HasOne("Airbnb.DATA.models.PropertyCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airbnb.DATA.models.User", "User")
                        .WithMany("Properties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Airbnb.DATA.models.PropertyImage", b =>
                {
                    b.HasOne("Airbnb.DATA.models.Property", "Property")
                        .WithMany("PropertyImages")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Airbnb.DATA.models.Review", b =>
                {
                    b.HasOne("Airbnb.DATA.models.Booking", "Booking")
                        .WithOne("Review")
                        .HasForeignKey("Airbnb.DATA.models.Review", "BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Airbnb.DATA.models.Property", "Property")
                        .WithMany("Reviews")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Airbnb.DATA.models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Airbnb.DATA.models.User", b =>
                {
                    b.OwnsMany("Airbnb.DATA.models.Identity.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedIn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ExpiredIn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("RevokedIn")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Airbnb.DATA.models.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Airbnb.DATA.models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Airbnb.DATA.models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Airbnb.DATA.models.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airbnb.DATA.models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Airbnb.DATA.models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Airbnb.DATA.models.Booking", b =>
                {
                    b.Navigation("Review")
                        .IsRequired();
                });

            modelBuilder.Entity("Airbnb.DATA.models.Property", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("Bookings");

                    b.Navigation("PropertyImages");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Airbnb.DATA.models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Properties");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
